// Pest grammar for HLHDL-like syntax

program = _{ SOI  ~ (outer_statement +)* ~ EOI }
outer_statement = _{ function_def}

function_def= { "fn" ~ identifier ~ "(" ~ params? ~ ")" ~ return_type? ~ function_body }
return_type= { "->" ~ value_type}
function_body = { oppening_bracket ~ (inner_statement +)* ~ closing_bracket }
inner_statement = _{ inner_statements_with_semicolon | if_statement}
inner_statements_with_semicolon = _{ (return_statement | assignment | function_call) ~ ";" }
params = { param ~ ("," ~ param)* }
param = { identifier ~ ":" ~ value_type}

function_call = { identifier ~ "(" ~ param_list? ~ ")" }
param_list = { expression ~ ("," ~ expression)* }

value_type= { "String" | "Int"}

assignment = _{ "let " ~ identifier ~ "=" ~ expression }
// anything that can be coerced to a value
expression = {
    dyadic
    | primary_expression
}
dyadic = { primary_expression ~ (operator ~ primary_expression) }
primary_expression = _{ function_call | paren_expression | identifier | value }
paren_expression = _{ "(" ~ expression ~ ")" }

// any word that starts with a letter and is followed by letters or numbers
identifier = _{ !reserved ~ primary_identifier }
primary_identifier = @{ !ASCII_DIGIT ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
reserved = _{ "fn" | "if" | "else" | "return" | "let" | "String" | "int" }

operator = { "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" }
value = { int | string }
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
int = @{ ASCII_DIGIT+ }

oppening_bracket = _{ "{" }
closing_bracket = _{ "}" }
if_statement= { "if" ~ expression ~ oppening_bracket ~ (inner_statement +)* ~ closing_bracket ~ ("else" ~ oppening_bracket ~ (inner_statement +)* ~ closing_bracket)? }
return_statement = { "return" ~ expression }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*) }

