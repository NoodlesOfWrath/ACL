// Pest grammar for HLHDL-like syntax

program = _{ SOI ~ ";"* ~ (statement ~ ";"+)* ~ EOI }
statement = _{assignment}
assignment = _{ "let " ~ identifier ~ "=" ~ expression }
// anything that can be coerced to a value
expression = {
    dyadic
    | identifier
    | value
    | paren_expression
}
paren_expression = _{ "(" ~ expression ~ ")" }

// any word that starts with a letter and is followed by letters or numbers
identifier = _{ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT)* }
operator = _{ "+" | "-" | "*" | "/" | "%" }
value = _{ ASCII_DIGIT+ }

dyadic = _{ primary_expression ~ (operator ~ primary_expression)* }

primary_expression = _{
    paren_expression
    | identifier
    | value
}



WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
